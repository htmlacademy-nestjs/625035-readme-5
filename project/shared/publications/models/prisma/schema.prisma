// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
  output   = "../../../../node_modules/.prisma/client"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Publication {
  comments         Comment[]
  createdAt        DateTime          @default(now()) @map("created_at")
  id               String            @id @default(uuid())
  likes            Like[]
  reposts          Repost[]
  tags             Tag[]
  type             String
  updatedAt        DateTime          @updatedAt @map("updated_at")
  userId           String            @map("user_id")
  linkPublication  LinkPublication?
  photoPublication PhotoPublication?
  quotePublication QuotePublication?
  textPublication  TextPublication?
  videoPublication VideoPublication?

  @@map("publications")
}

model LinkPublication {
  link            String
  linkDescription String      @map("link_description")
  publication     Publication @relation(fields: [publicationId], references: [id], onUpdate: Cascade, onDelete: Cascade)
  publicationId   String      @unique

  @@map("link_publications")
}

model PhotoPublication {
  photoId       String      @map("photo_id")
  publication   Publication @relation(fields: [publicationId], references: [id], onUpdate: Cascade, onDelete: Cascade)
  publicationId String      @unique

  @@map("photo_publications")
}

model TextPublication {
  announcement  String
  text          String
  title         String
  publication   Publication @relation(fields: [publicationId], references: [id], onUpdate: Cascade, onDelete: Cascade)
  publicationId String      @unique

  @@index([title])
  @@map("text_publications")
}

model QuotePublication {
  quoteAuthor   String?     @map("quote_author")
  quoteText     String      @map("quote_text")
  publication   Publication @relation(fields: [publicationId], references: [id], onUpdate: Cascade, onDelete: Cascade)
  publicationId String      @unique

  @@map("quote_publications")
}

model VideoPublication {
  title         String
  videoLink     String      @map("video_link")
  publication   Publication @relation(fields: [publicationId], references: [id], onUpdate: Cascade, onDelete: Cascade)
  publicationId String      @unique

  @@index([title])
  @@map("video_publications")
}

model Repost {
  createdAt      DateTime    @default(now()) @map("created_at")
  id             String      @id @default(uuid())
  originalUserId String      @map("original_user_id")
  publicationId  String      @map("publication_id")
  updatedAt      DateTime    @updatedAt @map("updated_at")
  userId         String      @map("user_id")
  Publication    Publication @relation(fields: [publicationId], references: [id], onUpdate: Cascade, onDelete: Cascade)

  @@map("reposts")
}

model Tag {
  id            String       @id @default(uuid())
  value         String
  Publication   Publication? @relation(fields: [publicationId], references: [id], onUpdate: Cascade, onDelete: Cascade)
  publicationId String?

  @@map("tags")
}

model Like {
  id            String       @id @default(uuid())
  userId        String       @map("user_id")
  Publication   Publication? @relation(fields: [publicationId], references: [id], onUpdate: Cascade, onDelete: Cascade)
  publicationId String?

  @@map("likes")
}

model Comment {
  id            String       @id @default(uuid())
  userId        String       @map("user_id")
  value         String
  Publication   Publication? @relation(fields: [publicationId], references: [id], onUpdate: Cascade, onDelete: Cascade)
  publicationId String?

  @@map("comments")
}
