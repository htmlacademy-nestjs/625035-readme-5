// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
  output   = "../../../../node_modules/.prisma/client"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum PublicationState {
  draft
  publication
}

enum PublicationType {
  link
  photo
  quote
  text
  video
}

model Publication {
  announcement     String?
  // todo: fix types for this
  announcementText String?          @map("announcement_text")
  comments         Comment[]
  createdAt        DateTime         @default(now()) @map("created_at")
  id               String           @id @default(uuid())
  likes            Like[]
  link             String?
  linkDescription  String?          @map("link_description")
  photoId          String?          @map("photo_id")
  quoteAuthor      String?          @map("quote_author")
  quoteText        String?          @map("quote_text")
  reposts          Repost[]
  state            PublicationState
  tags             Tag[]
  title            String?
  type             PublicationType
  updatedAt        DateTime         @updatedAt @map("updated_at")
  userId           String           @map("user_id")
  videoLink        String?          @map("video_link")

  @@index([title])
  @@map("publications")
}

model Repost {
  createdAt      DateTime    @default(now()) @map("created_at")
  id             String      @id @default(uuid())
  originalUserId String      @map("original_user_id")
  publicationId  String      @map("publication_id")
  updatedAt      DateTime    @updatedAt @map("updated_at")
  userId         String      @map("user_id")
  Publication    Publication @relation(fields: [publicationId], references: [id], onUpdate: Cascade, onDelete: Cascade)

  @@map("reposts")
}

model Tag {
  id            String       @id @default(uuid())
  value         String
  Publication   Publication? @relation(fields: [publicationId], references: [id], onUpdate: Cascade, onDelete: Cascade)
  publicationId String?

  @@map("tags")
}

model Like {
  id            String       @id @default(uuid())
  userId        String       @map("user_id")
  Publication   Publication? @relation(fields: [publicationId], references: [id], onUpdate: Cascade, onDelete: Cascade)
  publicationId String?

  @@map("likes")
}

model Comment {
  id            String       @id @default(uuid())
  userId        String       @map("user_id")
  value         String
  Publication   Publication? @relation(fields: [publicationId], references: [id], onUpdate: Cascade, onDelete: Cascade)
  publicationId String?

  @@map("comments")
}
